BetterVis_Boxplot1 <- function(data, x_var, y_var, fill_var, use_facet = FALSE, 
                               title = NULL, x_label_angle = 45, x_label_bold = FALSE, y_label_bold = FALSE, 
                               axis_titles = c("", ""), axis_title_bold = FALSE, custom_colors = NULL, 
                               jitter = TRUE, jitter_color = NULL, jitter_width = 0.1, jitter_alpha = 1, jitter_size = 1, 
                               legend_show = TRUE, legend_title = NULL, 
                               box_width = 0.75, comparison_col = NULL, comparison = NULL, comparison_method = "wilcox", 
                               box_background = TRUE, 
                               jitter_legend = FALSE, fill_legend = TRUE,
                               background_color = "white", background_border = TRUE, sig_type = "SYMBOL",
                               guides_modifications = NULL, violin = FALSE) {
  if (!all(c(x_var, y_var, fill_var) %in% colnames(data))) {
    stop("确保 x_var, y_var 和 fill_var 是提供的数据框中的列名。")
  }
  if (!is.numeric(data[[y_var]])) {
    data[[y_var]] <- as.numeric(as.character(data[[y_var]]))
  }
  data <- data %>% filter(!is.na(.data[[x_var]]), !is.na(.data[[y_var]]), !is.na(.data[[fill_var]]))
  
  x_title <- ifelse(axis_titles[1] == "", "", axis_titles[1])
  y_title <- ifelse(axis_titles[2] == "", "", axis_titles[2])
  
  x_title_bold <- ifelse(axis_title_bold, "bold", "plain")
  y_title_bold <- ifelse(axis_title_bold, "bold", "plain")
  
  unique_fill_levels <- length(unique(data[[fill_var]]))
  if (!is.null(custom_colors)) {
    if (length(custom_colors) < unique_fill_levels) {
      stop("颜色数量不足以覆盖所有 fill_var 的水平。")
    }
    fill_colors <- custom_colors
  } else {
    fill_colors <- brewer.pal(min(max(unique_fill_levels, 3), 12), "Paired")
  }
  
  if (is.null(jitter_color)) {
    jitter_color <- fill_colors
  }
  
  if (use_facet && comparison_col == fill_var) {
    plot_aes <- aes(x = .data[[fill_var]], y = .data[[y_var]], fill = .data[[fill_var]])
  } else {
    plot_aes <- aes(x = .data[[x_var]], y = .data[[y_var]], fill = .data[[fill_var]])
  }
  
  if (violin) {
    p <- ggplot(data, plot_aes) +
      geom_violin(position = position_dodge(width = box_width), alpha = 0.6) +
      geom_boxplot(width = 0.2, position = position_dodge(width = box_width), outlier.shape = NA)
  } else if (box_background) {
    p <- ggplot(data, plot_aes) +
      geom_boxplot(outlier.shape = NA, position = position_dodge(width = box_width), width = box_width)
  } else {
    p <- ggplot(data, plot_aes) +
      geom_boxplot(outlier.shape = NA, position = position_dodge(width = box_width), width = box_width, 
                   aes(color = .data[[fill_var]]), fill = NA) +
      scale_color_manual(values = jitter_color, guide = ifelse(jitter_legend, "legend", "none"))
  }
  
  if (jitter) {
    p <- p + geom_jitter(position = position_jitterdodge(jitter.width = jitter_width, dodge.width = box_width), 
                         size = jitter_size, alpha = jitter_alpha, aes(color = .data[[fill_var]])) +
      scale_color_manual(values = jitter_color, guide = ifelse(jitter_legend, "legend", "none"))
  }
  
  p <- p + scale_fill_manual(values = fill_colors, name = legend_title, guide = ifelse(fill_legend, "legend", "none"))
  
  y_min <- min(data[[y_var]], na.rm = TRUE)
  y_max <- max(data[[y_var]], na.rm = TRUE)
  y_range <- y_max - y_min
  p <- p + ylim(y_min - 0.1 * y_range, y_max + 0.2 * y_range)
  
  if (!is.null(title)) {
    p <- p + ggtitle(title) + theme(plot.title = element_text(hjust = 0.5, size = 18, face = "bold"))
  }
  
  p <- p + ylab(y_title) + xlab(x_title)
  
  p <- p + theme_cowplot() +
    theme(
      legend.position = ifelse(legend_show, "right", "none"),
      axis.title.x = element_text(size = 15, face = ifelse(x_title != "", x_title_bold, "plain")),
      axis.title.y = element_text(size = 15, face = ifelse(y_title != "", y_title_bold, "plain")),
      axis.text = element_text(size = 15),
      axis.text.x = element_text(angle = x_label_angle, hjust = 1, face = ifelse(x_label_bold, "bold", "plain")),
      axis.text.y = element_text(face = ifelse(y_label_bold, "bold", "plain")),
      plot.margin = unit(c(0.5, 1, 0, 1), "cm"),
      plot.background = element_rect(fill = background_color, 
                                     color = ifelse(background_border, "black", "white"), 
                                     size = ifelse(background_border, 1, 0))
    ) +
    theme(panel.border = element_rect(color = ifelse(background_border, "black", NA), fill = NA, size = ifelse(background_border, 1, 0)))
  
  if (!is.null(guides_modifications)) {
    p <- p + guides_modifications
  }
  
  if (!is.null(comparison_col) && !is.null(comparison)) {
    if (!(comparison_col %in% c(x_var, fill_var))) {
      stop("comparison_col 必须是 x_var 或 fill_var 之一。")
    }
    
    if (comparison_method == "wilcox") {
      method <- "wilcox.test"
    } else if (comparison_method == "t.test") {
      method <- "t.test"
    } else {
      stop("不支持的比较方法。请选择 'wilcox' 或 't.test'。")
    }
    
    if (use_facet && comparison_col == fill_var) {
      p <- p + stat_compare_means(
        comparisons = comparison,
        method = comparison_method,
        label = ifelse(sig_type == "SYMBOL", "p.signif", "p.format"),
        tip.length = 0.01,
        size = 5
      )
    } else if (comparison_col == x_var && !use_facet) {
      p <- p + stat_compare_means(
        comparisons = comparison,
        method = comparison_method,
        label = ifelse(sig_type == "SYMBOL", "p.signif", "p.format"),
        label.y = y_max + 0.05 * y_range,
        tip.length = 0.01,
        size = 5
      )
    } else {
      warning("当 use_facet = TRUE 且 comparison_col 不等于 fill_var 时，比较标注可能无法正确添加。")
    }
  }
  
  if (use_facet) {
    p <- p + facet_wrap(~ .data[[x_var]], scales = "free_x")
  }
  
  return(p)
}